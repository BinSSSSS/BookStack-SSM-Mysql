<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.tblack.bookstack.mapper.BookUserMapper">
	<resultMap id="BookUserResultMap"
		type="cn.tblack.bookstack.pojo.BookUser">
		<id column="ACCOUNT" jdbcType="DECIMAL" property="account" />
		<result column="USERNAME" jdbcType="VARCHAR"
			property="username" />
		<result column="ID" jdbcType="DECIMAL" property="id" />
		<result column="PASSWORD" jdbcType="VARCHAR"
			property="password" />
		<result column="GENDER" jdbcType="VARCHAR" property="gender" />
		<result column="BIRTHDAY" jdbcType="TIMESTAMP"
			property="birthday" />
		<result column="PHONE_NUMBER" jdbcType="VARCHAR"
			property="phoneNumber" />
		<result column="HOMELAND" jdbcType="VARCHAR"
			property="homeland" />
		<result column="AGE" jdbcType="DECIMAL" property="age" />
		<result column="PERSONAL_SIGNATURE" jdbcType="VARCHAR"
			property="personalSignature" />
		<result column="JOB" jdbcType="VARCHAR" property="job" />
		<result column="EMAIL" jdbcType="VARCHAR" property="email" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="BookUser_Column_List">
		ACCOUNT, USERNAME, ID, PASSWORD, GENDER, BIRTHDAY,
		PHONE_NUMBER, HOMELAND,
		AGE,
		PERSONAL_SIGNATURE, JOB, EMAIL
	</sql>

	<select id="selectByExample"
		parameterType="cn.tblack.bookstack.pojo.BookUserExample"
		resultMap="BookUserResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="BookUser_Column_List" />
		from BOOK_USER
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>

	<!-- 拿到数据表内的所有数据 -->
	<select id="selectAll" resultMap="BookUserResultMap">
		select
		<include refid="BookUser_Column_List"></include>
		from BOOK_USER
	</select>

	<!-- 根据账号来进行数据的查询 -->
	<select id="selectByAccount" parameterType="java.lang.Long"
		resultMap="BookUserResultMap">
		select
		<include refid="BookUser_Column_List" />
		from BOOK_USER
		where ACCOUNT = #{account,jdbcType=DECIMAL}
	</select>

	<!-- 根据用户名来进行数据的查询 -->
	<select id="selectByUsername" parameterType="java.lang.String"
		resultMap="BookUserResultMap">
		select
		<include refid="BookUser_Column_List" />
		from BOOK_USER
		where USERNAME = #{username,jdbcType=VARCHAR}
	</select>

	<!-- 根据手机号码来进行数据的查询 -->
	<select id="selectByPhoneNumber" parameterType="java.lang.String"
		resultMap="BookUserResultMap">
		select
		<include refid="BookUser_Column_List" />
		from BOOK_USER
		where PHONE_NUMBER = #{phoneNumber,jdbcType=VARCHAR}
	</select>

	<!-- 按照名字的模糊查询 -->
	<select id="fuzzySelectByUsername"
		parameterType="java.lang.String" resultMap="BookUserResultMap">
		select
		<include refid="BookUser_Column_List" />
		from BOOK_USER
		<!-- 如果当传递的参数为空或者是空字符的话， 那么直接查询全部 -->
		<if test="value != null and value !=''">
			where USERNAME LIKE '%${value}%'
		</if>
	</select>

	<!-- 根据账号来进行数据的删除操作 -->
	<delete id="deleteByAccount" parameterType="java.lang.Long">
		delete from BOOK_USER
		where ACCOUNT = #{account,jdbcType=DECIMAL}
	</delete>

	<!-- 根据用户名来进行数据的删除操作 -->
	<delete id="deleteByUsername" parameterType="java.lang.String">
		delete from
		BOOK_USER
		where USERNAME = #{username,jdbcType=VARCHAR}
	</delete>

	<!-- 根据手机号码来进行数据的删除操作 -->
	<delete id="deleteByPhoneNumber" parameterType="java.lang.String">
		delete from
		BOOK_USER
		where PHONE_NUMBER = #{phoneNumber,jdbcType=VARCHAR}
	</delete>

	<delete id="deleteByExample"
		parameterType="cn.tblack.bookstack.pojo.BookUserExample">
		delete from BOOK_USER
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>

	<!-- 插入一个新的用户数据到数据库中 -->
	<insert id="insert"
		parameterType="cn.tblack.bookstack.pojo.BookUser">
		insert into BOOK_USER
		(ACCOUNT, USERNAME, ID,
		PASSWORD, GENDER, BIRTHDAY,
		PHONE_NUMBER,
		HOMELAND, AGE,
		PERSONAL_SIGNATURE, JOB, EMAIL
		)
		values
		(#{account,jdbcType=DECIMAL},
		#{username,jdbcType=VARCHAR},
		#{id,jdbcType=DECIMAL},
		#{password,jdbcType=VARCHAR},
		#{gender,jdbcType=VARCHAR},
		#{birthday,jdbcType=TIMESTAMP},
		#{phoneNumber,jdbcType=VARCHAR},
		#{homeland,jdbcType=VARCHAR},
		#{age,jdbcType=DECIMAL},
		#{personalSignature,jdbcType=VARCHAR},
		#{job,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR}
		)
	</insert>

	<!-- 插入一个新的用户到数据库中， 不插入空字段 -->
	<insert id="insertSelective"
		parameterType="cn.tblack.bookstack.pojo.BookUser">
		insert into BOOK_USER
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="account != null">
				ACCOUNT,
			</if>
			<if test="username != null">
				USERNAME,
			</if>
			<if test="id != null">
				ID,
			</if>
			<if test="password != null">
				PASSWORD,
			</if>
			<if test="gender != null">
				GENDER,
			</if>
			<if test="birthday != null">
				BIRTHDAY,
			</if>
			<if test="phoneNumber != null">
				PHONE_NUMBER,
			</if>
			<if test="homeland != null">
				HOMELAND,
			</if>
			<if test="age != null">
				AGE,
			</if>
			<if test="personalSignature != null">
				PERSONAL_SIGNATURE,
			</if>
			<if test="job != null">
				JOB,
			</if>
			<if test="email != null">
				EMAIL,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="account != null">
				#{account,jdbcType=DECIMAL},
			</if>
			<if test="username != null">
				#{username,jdbcType=VARCHAR},
			</if>
			<if test="id != null">
				#{id,jdbcType=DECIMAL},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				#{gender,jdbcType=VARCHAR},
			</if>
			<if test="birthday != null">
				#{birthday,jdbcType=TIMESTAMP},
			</if>
			<if test="phoneNumber != null">
				#{phoneNumber,jdbcType=VARCHAR},
			</if>
			<if test="homeland != null">
				#{homeland,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				#{age,jdbcType=DECIMAL},
			</if>
			<if test="personalSignature != null">
				#{personalSignature,jdbcType=VARCHAR},
			</if>
			<if test="job != null">
				#{job,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				#{email,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>


	<select id="countByExample"
		parameterType="cn.tblack.bookstack.pojo.BookUserExample"
		resultType="java.lang.Long">
		select count(*) from BOOK_USER
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>


	<!-- 拿到数据库所有数据的条数 -->
	<select id="count" resultType="java.lang.Long">
		select count(*) from BOOK_USER
	</select>

	<!-- 拿到数据库内指定账号的数据条数 -->
	<select id="countByAccount" parameterType="java.lang.Long"
		resultType="java.lang.Long">
		select count(*) from
		BOOK_USER
		where
		account=#{account,jdbcType=DECIMAL}
	</select>

	<!-- 拿到数据库内指定用户名的数据条数 -->
	<select id="countByUsername" parameterType="java.lang.String"
		resultType="java.lang.Long">
		select count(*) from
		BOOK_USER
		where
		username=#{username,jdbcType=VARCHAR}
	</select>

	<!-- 拿到数据库内指定手机号的数据条数 -->
	<select id="countByPhoneNumber" parameterType="java.lang.String"
		resultType="java.lang.Long">
		select count(*) from
		BOOK_USER
		where
		PHONE_NUMBER=#{phoneNumber,jdbcType=VARCHAR}
	</select>

	<update id="updateByExampleSelective" parameterType="map">
		update BOOK_USER
		<set>
			<if test="record.account != null">
				ACCOUNT = #{record.account,jdbcType=DECIMAL},
			</if>
			<if test="record.username != null">
				USERNAME = #{record.username,jdbcType=VARCHAR},
			</if>
			<if test="record.id != null">
				ID = #{record.id,jdbcType=DECIMAL},
			</if>
			<if test="record.password != null">
				PASSWORD = #{record.password,jdbcType=VARCHAR},
			</if>
			<if test="record.gender != null">
				GENDER = #{record.gender,jdbcType=VARCHAR},
			</if>
			<if test="record.birthday != null">
				BIRTHDAY = #{record.birthday,jdbcType=TIMESTAMP},
			</if>
			<if test="record.phoneNumber != null">
				PHONE_NUMBER = #{record.phoneNumber,jdbcType=VARCHAR},
			</if>
			<if test="record.homeland != null">
				HOMELAND = #{record.homeland,jdbcType=VARCHAR},
			</if>
			<if test="record.age != null">
				AGE = #{record.age,jdbcType=DECIMAL},
			</if>
			<if test="record.personalSignature != null">
				PERSONAL_SIGNATURE =
				#{record.personalSignature,jdbcType=VARCHAR},
			</if>
			<if test="record.job != null">
				JOB = #{record.job,jdbcType=VARCHAR},
			</if>
			<if test="record.email != null">
				EMAIL = #{record.email,jdbcType=VARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>

	<update id="updateByExample" parameterType="map">
		update BOOK_USER
		set ACCOUNT = #{record.account,jdbcType=DECIMAL},
		USERNAME = #{record.username,jdbcType=VARCHAR},
		ID =
		#{record.id,jdbcType=DECIMAL},
		PASSWORD =
		#{record.password,jdbcType=VARCHAR},
		GENDER =
		#{record.gender,jdbcType=VARCHAR},
		BIRTHDAY =
		#{record.birthday,jdbcType=TIMESTAMP},
		PHONE_NUMBER =
		#{record.phoneNumber,jdbcType=VARCHAR},
		HOMELAND =
		#{record.homeland,jdbcType=VARCHAR},
		AGE =
		#{record.age,jdbcType=DECIMAL},
		PERSONAL_SIGNATURE =
		#{record.personalSignature,jdbcType=VARCHAR},
		JOB =
		#{record.job,jdbcType=VARCHAR},
		EMAIL =
		#{record.email,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>

	<update id="updateByUserIdSelective"
		parameterType="cn.tblack.bookstack.pojo.BookUser">
		update BOOK_USER
		<set>
			<if test="username != null">
				USERNAME = #{username,jdbcType=VARCHAR},
			</if>
			<if test="id != null">
				ACCOUNT = #{account,jdbcType=DECIMAL},
			</if>
			<if test="password != null">
				PASSWORD = #{password,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				GENDER = #{gender,jdbcType=VARCHAR},
			</if>
			<if test="birthday != null">
				BIRTHDAY = #{birthday,jdbcType=TIMESTAMP},
			</if>
			<if test="phoneNumber != null">
				PHONE_NUMBER = #{phoneNumber,jdbcType=VARCHAR},
			</if>
			<if test="homeland != null">
				HOMELAND = #{homeland,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				AGE = #{age,jdbcType=DECIMAL},
			</if>
			<if test="personalSignature != null">
				PERSONAL_SIGNATURE =
				#{personalSignature,jdbcType=VARCHAR},
			</if>
			<if test="job != null">
				JOB = #{job,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				EMAIL = #{email,jdbcType=VARCHAR},
			</if>
		</set>
		where ID = #{id,jdbcType=DECIMAL}
	</update>

	<update id="updateByUserId"
		parameterType="cn.tblack.bookstack.pojo.BookUser">
		update BOOK_USER
		set USERNAME =
		#{username,jdbcType=VARCHAR},
		ACCOUNT = #{account,jdbcType=DECIMAL},
		PASSWORD = #{password,jdbcType=VARCHAR},
		GENDER =
		#{gender,jdbcType=VARCHAR},
		BIRTHDAY = #{birthday,jdbcType=TIMESTAMP},
		PHONE_NUMBER = #{phoneNumber,jdbcType=VARCHAR},
		HOMELAND =
		#{homeland,jdbcType=VARCHAR},
		AGE = #{age,jdbcType=DECIMAL},
		PERSONAL_SIGNATURE = #{personalSignature,jdbcType=VARCHAR},
		JOB =
		#{job,jdbcType=VARCHAR},
		EMAIL = #{email,jdbcType=VARCHAR}
		where ID
		= #{id,jdbcType=DECIMAL}
	</update>

	<!-- 根据账号和密码进行验证 -->
	<select id="verifyByAccount" resultType="java.lang.Integer">
		select count(*)
		from
		BOOK_USER
		where ACCOUNT = #{account,jdbcType=DECIMAL}
		and PASSWORD =
		#{password,jdbcType=VARCHAR}
	</select>

	<!-- 根据用户名和密码进行验证 -->
	<select id="verifyByUsername" resultType="java.lang.Integer">
		select count(*)
		from
		BOOK_USER
		where USERNAME = #{username,jdbcType=VARCHAR}
		and PASSWORD =
		#{password,jdbcType=VARCHAR}
	</select>

	<!-- 根据手机号码和密码进行验证 -->
	<select id="verifyByPhoneNumber" resultType="java.lang.Integer">
		select count(*)
		from
		BOOK_USER
		where PHONE_NUMBER = #{phoneNumber,jdbcType=VARCHAR}
		and PASSWORD =
		#{password,jdbcType=VARCHAR}
	</select>
</mapper>