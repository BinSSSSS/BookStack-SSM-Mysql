<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.tblack.bookstack.mapper.BookAdminMapper">
	<resultMap id="BookAdminResultMap"
		type="cn.tblack.bookstack.pojo.BookAdmin">
		<id column="ID" jdbcType="DECIMAL" property="id" />
		<result column="ADMIN_NAME" jdbcType="VARCHAR"
			property="adminName" />
		<result column="AUTHORIZER" jdbcType="VARCHAR"
			property="authorizer" />
		<result column="AUTHORIZER_TIME" jdbcType="TIMESTAMP"
			property="authorizerTime" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="BookAdmin_Column_List">
		ID, ADMIN_NAME, AUTHORIZER, AUTHORIZER_TIME
	</sql>

	<select id="selectByExample"
		parameterType="cn.tblack.bookstack.pojo.BookAdminExample"
		resultMap="BookAdminResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="BookAdmin_Column_List" />
		from BOOK_ADMIN
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>

	<!-- 根据管理员Id来拿到数据 -->
	<select id="selectByAdminId" parameterType="java.lang.Integer"
		resultMap="BookAdminResultMap">
		select
		<include refid="BookAdmin_Column_List" />
		from BOOK_ADMIN
		where ID = #{id,jdbcType=DECIMAL}
	</select>

	<!-- 根据管理员名来拿到数据 -->
	<select id="selectByAdminName" parameterType="java.lang.String"
		resultMap="BookAdminResultMap">
		select
		<include refid="BookAdmin_Column_List" />
		from BOOK_ADMIN
		where ADMIN_NAME = #{adminName,jdbcType=VARCHAR}
	</select>

	<!-- 拿到数据库内的所有数据 -->
	<select id="selectAll" resultMap="BookAdminResultMap">
		select
		<include refid="BookAdmin_Column_List" />
		from BOOK_ADMIN
	</select>

	<!-- 根据管理员id来删除数据 -->
	<delete id="deleteByAdminId" parameterType="java.lang.Integer">
		delete from
		BOOK_ADMIN
		where ID = #{id,jdbcType=DECIMAL}
	</delete>

	<!-- 根据管理员名字来删除数据 -->
	<delete id="deleteByAdminName" parameterType="java.lang.String">
		delete from
		BOOK_ADMIN
		where ADMIN_NAME = #{adminName,jdbcType=VARCHAR}
	</delete>

	<delete id="deleteByExample"
		parameterType="cn.tblack.bookstack.pojo.BookAdminExample">
		delete from BOOK_ADMIN
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>

	<!-- 向数据库插入一条新的数据 -->
	<insert id="insert"
		parameterType="cn.tblack.bookstack.pojo.BookAdmin">
		insert into BOOK_ADMIN (ID, ADMIN_NAME,
		AUTHORIZER,
		AUTHORIZER_TIME)
		values (#{id,jdbcType=DECIMAL},
		#{adminName,jdbcType=VARCHAR},
		#{authorizer,jdbcType=VARCHAR},
		#{authorizerTime,jdbcType=TIMESTAMP})
	</insert>
	
	<!-- 向数据库插入一条新的数据， 空白字段不进行插入 -->
	<insert id="insertSelective"
		parameterType="cn.tblack.bookstack.pojo.BookAdmin">
		insert into BOOK_ADMIN
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				ID,
			</if>
			<if test="adminName != null">
				ADMIN_NAME,
			</if>
			<if test="authorizer != null">
				AUTHORIZER,
			</if>
			<if test="authorizerTime != null">
				AUTHORIZER_TIME,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=DECIMAL},
			</if>
			<if test="adminName != null">
				#{adminName,jdbcType=VARCHAR},
			</if>
			<if test="authorizer != null">
				#{authorizer,jdbcType=VARCHAR},
			</if>
			<if test="authorizerTime != null">
				#{authorizerTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>

	<select id="countByExample"
		parameterType="cn.tblack.bookstack.pojo.BookAdminExample"
		resultType="java.lang.Long">
		select count(*) from BOOK_ADMIN
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>

	<!-- 拿到数据库内的所有数据 -->
	<select id="count" resultType="java.lang.Long">
		select count(*) from BOOK_ADMIN
	</select>

	
	<!-- 根据管理员id来获取数据的条数 -->
	<select id="countByAdminId" resultType="java.lang.Long">
		select count(*) from
		BOOK_ADMIN
		WHERE ID = #{id,jdbcType=DECIMAL}
	</select>

	<!-- 根据管理员名来获取数据的条数 -->
	<select id="countByAdminName" resultType="java.lang.Long">
		select count(*) from
		BOOK_ADMIN
		WHERE ADMIN_NAME = #{adminName,jdbcType=VARCHAR}
	</select>


	<update id="updateByExampleSelective" parameterType="map">
		update BOOK_ADMIN
		<set>
			<if test="record.id != null">
				ID = #{record.id,jdbcType=DECIMAL},
			</if>
			<if test="record.adminName != null">
				ADMIN_NAME = #{record.adminName,jdbcType=VARCHAR},
			</if>
			<if test="record.authorizer != null">
				AUTHORIZER = #{record.authorizer,jdbcType=VARCHAR},
			</if>
			<if test="record.authorizerTime != null">
				AUTHORIZER_TIME =
				#{record.authorizerTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>

	<!-- 根据管理员id来进行更新操作 -->
	<update id="updateByAdminId"
		parameterType="cn.tblack.bookstack.pojo.BookAdmin">
		update BOOK_ADMIN
		set
		ADMIN_NAME =
		#{record.adminName,jdbcType=VARCHAR},
		AUTHORIZER =
		#{record.authorizer,jdbcType=VARCHAR},
		AUTHORIZER_TIME =
		#{record.authorizerTime,jdbcType=TIMESTAMP}
		WHERE ID =
		#{record.id}
	</update>


	<!-- 根据管理员id来进行更新操作， 空字段不更新 -->
	<update id="updateByAdminIdSelective"
		parameterType="cn.tblack.bookstack.pojo.BookAdmin">
		update BOOK_ADMIN
		<set>
			<if test="record.adminName != null">
				ADMIN_NAME = #{record.adminName,jdbcType=VARCHAR},
			</if>
			<if test="record.authorizer !=  null">
				AUTHORIZER =
				#{record.authorizer,jdbcType=VARCHAR},
			</if>
			<if test="record.authorizerTime != null">
				AUTHORIZER_TIME =
				#{record.authorizerTime,jdbcType=TIMESTAMP}
			</if>
		</set>
		WHERE ID = #{record.id}
	</update>

	<!-- 根据管理员名字和密码来进行验证 -->
	<select id="verify" resultType="java.lang.Integer">
		select count(*)
		from BOOK_ADMIN BA , BOOK_USER BU
		WHERE BA.ADMIN_NAME = #{adminName} 
		AND BU.PASSWORD = #{password} AND BA.ADMIN_NAME = BU.USERNAME
	</select>

</mapper>